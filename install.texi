@node Download
@unnumbered Download

@set VERSION 4.2.4

Preferable way is to download tarball with the signature from
website and, for example, run tests with benchmarks:

@example
$ [fetch|wget] http://gogost.cypherpunks.ru/gogost-@value{VERSION}.tar.xz
$ [fetch|wget] http://gogost.cypherpunks.ru/gogost-@value{VERSION}.tar.xz.sig
$ gpg --verify gogost-@value{VERSION}.tar.xz.sig gogost-@value{VERSION}.tar.xz
$ xz --decompress --stdout gogost-@value{VERSION}.tar.xz | tar xf -
$ cd gogost-@value{VERSION}
$ redo bench
$ redo all
$ echo hello world | ./streebog256
f72018189a5cfb803dbe1f2149cf554c40093d8e7f81c21e08ac5bcd09d9934d
@end example

It uses @url{http://cr.yp.to/redo.html, redo} build system for that
examples. You can use either dozen of various implementations, or at
least minimalistic POSIX shell @code{apenwarr/do}:

@example
$ [fetch|wget] https://github.com/apenwarr/redo/raw/master/minimal/do
$ mv do redo ; chmod +x redo
@end example

@include download.texi

And then you can include its source code in your project for example
like this:

@example
$ mkdir -p myproj/src
$ cp -r gogost-@value{VERSION}/src/go.cypherpunks.ru myproj/src
$ export GOPATH=$PWD/myproj
$ cd myproj/src
$ cat > main.go <<EOF
package main

import (
    "encoding/hex"
    "fmt"

    "go.cypherpunks.ru/gogost/v4/gost34112012256"
)

func main() @{
    h := gost34112012256.New()
    h.Write([]byte("hello world\n"))
    fmt.Println(hex.EncodeToString(h.Sum(nil)))
@}
EOF
$ go run main.go
f72018189a5cfb803dbe1f2149cf554c40093d8e7f81c21e08ac5bcd09d9934d
@end example

You @strong{have to} verify downloaded tarballs integrity and
authenticity to be sure that you retrieved trusted and untampered
software. @url{https://www.gnupg.org/, GNU Privacy Guard} is used
for that purpose.

For the very first time it is necessary to get signing public key and
import it. It is provided below, but you should check alternative
resources.

@verbatim
pub   rsa2048/0x82343436696FC85A 2016-09-13 [SC]
      CEBD 1282 2C46 9C02 A81A  0467 8234 3436 696F C85A
uid   GoGOST releases <gogost at cypherpunks dot ru>
@end verbatim

@itemize

@item @url{https://lists.cypherpunks.ru/mailman/listinfo/gost, gost} maillist

@item
@example
$ gpg --auto-key-locate dane --locate-keys gogost at cypherpunks dot ru
$ gpg --auto-key-locate wkd --locate-keys gogost at cypherpunks dot ru
@end example

@item
@verbatiminclude PUBKEY.asc

@end itemize

GoGOST is also @command{go get}-able. For example to use
@command{streebog256} utility:

@example
$ go get go.cypherpunks.ru/gogost/cmd/streebog256
@end example

@code{go.cypherpunks.ru} uses @url{http://ca.cypherpunks.ru/, ca.cypherpunks.ru}
certificate authority. If you have issues using either
@code{sum.golang.org} or @code{proxy.golang.org}, then you can disable
their usage with @env{GOPRIVATE=go.cypherpunks.ru/gogost} environment
variable.

Also you can use @code{replace} feature inside your @file{go.mod}, like:

@example
require go.cypherpunks.ru/gogost/v4 v@value{VERSION}
replace go.cypherpunks.ru/gogost/v4 => /home/stargrave/gogost-@value{VERSION}/src/go.cypherpunks.ru/gogost/v4
@end example

You can obtain development source code with
@command{git clone git://git.cypherpunks.ru/gogost.git}.
