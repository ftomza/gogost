\input texinfo
@documentencoding UTF-8
@settitle GoGOST

@copying
Copyright @copyright{} 2015-2020 @email{stargrave@@stargrave.org, Sergey Matveev}
@end copying

@node Top
@top GoGOST

Pure Go GOST cryptographic functions library.
GOST is GOvernment STandard of Russian Federation (and Soviet Union).
It is
@url{https://www.gnu.org/philosophy/pragmatic.html, copylefted}
@url{https://www.gnu.org/philosophy/free-sw.html, free software}:
licenced under @url{https://www.gnu.org/licenses/gpl-3.0.html, GPLv3}.
You can read about GOST algorithms @url{http://www.gost.cypherpunks.ru/, more}.

Currently supported algorithms are:

@itemize
@item GOST 28147-89 (@url{https://tools.ietf.org/html/rfc5830.html, RFC 5830})
    block cipher with ECB, CNT (CTR), CFB, MAC,
    CBC (@url{https://tools.ietf.org/html/rfc4357.html, RFC 4357})
    modes of operation
@item various 28147-89-related S-boxes included
@item GOST R 34.11-94 hash function
    (@url{https://tools.ietf.org/html/rfc5831.html, RFC 5831})
@item GOST R 34.11-2012 Стрибог (Streebog) hash function
    (@url{https://tools.ietf.org/html/rfc6986.html, RFC 6986})
@item GOST R 34.10-2001
    (@url{https://tools.ietf.org/html/rfc5832.html, RFC 5832})
    public key signature function
@item GOST R 34.10-2012
    (@url{https://tools.ietf.org/html/rfc7091.html, RFC 7091})
    public key signature function
@item various 34.10 curve parameters included
@item Coordinates conversion from twisted Edwards to Weierstrass
    form and vice versa
@item VKO GOST R 34.10-2001 key agreement function
    (@url{https://tools.ietf.org/html/rfc4357.html, RFC 4357})
@item VKO GOST R 34.10-2012 key agreement function
    (@url{https://tools.ietf.org/html/rfc7836.html, RFC 7836})
@item @code{KDF_GOSTR3411_2012_256} KDF function
    (@url{https://tools.ietf.org/html/rfc7836.html, RFC 7836})
@item GOST R 34.12-2015 128-bit block cipher Кузнечик (Kuznechik)
    (@url{https://tools.ietf.org/html/rfc7801.html, RFC 7801})
@item GOST R 34.12-2015 64-bit block cipher Магма (Magma)
@item GOST R 34.13-2015 padding methods
@item MGM AEAD mode for 64 and 128 bit ciphers
@item TLSTREE keyscheduling function
@item ESPTREE/IKETREE (IKE* is the same as ESP*) keyscheduling function
@item @code{PRF_IPSEC_PRFPLUS_GOSTR3411_2012_@{256,512@}} and generic
    @code{prf+} functions (Р 50.1.111-2016 with IKEv2
    @url{https://tools.ietf.org/html/rfc5831.html, RFC 7296})
@end itemize

Probably you could be interested in
@url{//www.gostls13.cypherpunks.ru/, Go's support of GOST TLS 1.3}.

Example 34.10-2012-256 keypair generation, signing and verifying:

@verbatim
import (
    "crypto/rand"
    "io"
    "go.cypherpunks.ru/gogost/v5/gost3410"
    "go.cypherpunks.ru/gogost/v5/gost34112012256"
)
func main() {
    data := []byte("data to be signed")
    hasher := gost34112012256.New()
    _, err := hasher.Write(data)
    dgst := hasher.Sum(nil)
    curve := gost3410.CurveIdtc26gost34102012256paramSetB()
    prvRaw := make([]byte, 32)
    _, err = io.ReadFull(rand.Reader, prvRaw)
    prv, err := gost3410.NewPrivateKey(curve, prvRaw)
    pub, err := prv.PublicKey()
    pubRaw := pub.Raw()
    sign, err := prv.Sign(rand.Reader, dgst, nil)
    pub, err = gost3410.NewPublicKey(curve, pubRaw)
    isValid, err := pub.VerifyDigest(dgst, sign)
    if !isValid { panic("signature is invalid") }
}
@end verbatim

Please send questions, bug reports and patches to
@url{https://lists.cypherpunks.ru/mailman/listinfo/gost, gost}
mailing list. Announcements also go to this mailing list.

@insertcopying

@include faq.texi
@include news.texi
@include install.texi

@bye
